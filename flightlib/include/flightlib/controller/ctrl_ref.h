// Generated by gencpp from file quad_pos_ctrl/ctrl_ref.msg
// DO NOT EDIT!


#ifndef QUAD_POS_CTRL_MESSAGE_CTRL_REF_H
#define QUAD_POS_CTRL_MESSAGE_CTRL_REF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quad_pos_ctrl
{
template <class ContainerAllocator>
struct ctrl_ref_
{
  typedef ctrl_ref_<ContainerAllocator> Type;

  ctrl_ref_()
    : header()
    , pos_ref()
    , vel_ref()
    , acc_ref()
    , yaw_ref(0.0)
    , ref_mask(0)  {
      pos_ref.assign(0.0);

      vel_ref.assign(0.0);

      acc_ref.assign(0.0);
  }
  ctrl_ref_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_ref()
    , vel_ref()
    , acc_ref()
    , yaw_ref(0.0)
    , ref_mask(0)  {
  (void)_alloc;
      pos_ref.assign(0.0);

      vel_ref.assign(0.0);

      acc_ref.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 3>  _pos_ref_type;
  _pos_ref_type pos_ref;

   typedef boost::array<float, 3>  _vel_ref_type;
  _vel_ref_type vel_ref;

   typedef boost::array<float, 3>  _acc_ref_type;
  _acc_ref_type acc_ref;

   typedef float _yaw_ref_type;
  _yaw_ref_type yaw_ref;

   typedef uint8_t _ref_mask_type;
  _ref_mask_type ref_mask;



  enum {
    POS_CTRL_VALIED = 1u,
    VEL_CTRL_VALIED = 2u,
    ACC_CTRL_VALIED = 4u,
  };


  typedef boost::shared_ptr< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> const> ConstPtr;

}; // struct ctrl_ref_

typedef ::quad_pos_ctrl::ctrl_ref_<std::allocator<void> > ctrl_ref;

typedef boost::shared_ptr< ::quad_pos_ctrl::ctrl_ref > ctrl_refPtr;
typedef boost::shared_ptr< ::quad_pos_ctrl::ctrl_ref const> ctrl_refConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace quad_pos_ctrl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'quad_pos_ctrl': ['/home/yiqianlingqi/Work/pos_px4lidar_ctrl_ws/src/quad_pos_ctrl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c44a0c7d669f499d943b0196aea84d57";
  }

  static const char* value(const ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc44a0c7d669f499dULL;
  static const uint64_t static_value2 = 0x943b0196aea84d57ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quad_pos_ctrl/ctrl_ref";
  }

  static const char* value(const ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# enum mask\n\
uint8 POS_CTRL_VALIED = 1\n\
uint8 VEL_CTRL_VALIED = 2\n\
uint8 ACC_CTRL_VALIED = 4\n\
\n\
# \n\
Header     header\n\
float32[3] pos_ref\n\
float32[3] vel_ref\n\
float32[3] acc_ref\n\
float32    yaw_ref\n\
uint8      ref_mask\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_ref);
      stream.next(m.vel_ref);
      stream.next(m.acc_ref);
      stream.next(m.yaw_ref);
      stream.next(m.ref_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ctrl_ref_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quad_pos_ctrl::ctrl_ref_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_ref[]" << std::endl;
    for (size_t i = 0; i < v.pos_ref.size(); ++i)
    {
      s << indent << "  pos_ref[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos_ref[i]);
    }
    s << indent << "vel_ref[]" << std::endl;
    for (size_t i = 0; i < v.vel_ref.size(); ++i)
    {
      s << indent << "  vel_ref[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_ref[i]);
    }
    s << indent << "acc_ref[]" << std::endl;
    for (size_t i = 0; i < v.acc_ref.size(); ++i)
    {
      s << indent << "  acc_ref[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acc_ref[i]);
    }
    s << indent << "yaw_ref: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_ref);
    s << indent << "ref_mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ref_mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUAD_POS_CTRL_MESSAGE_CTRL_REF_H
